<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>src.Utils.scoring_utils</title>
    <link rel="stylesheet" href="../../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../../_static/pygments.css" type="text/css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <h1>Source code for src.Utils.scoring_utils</h1><div class="highlight"><pre>
<span></span><span class="kn">from</span> <span class="nn">src.Utils.scorer</span> <span class="k">import</span> <span class="n">Scorer</span>
<span class="kn">from</span> <span class="nn">fuzzywuzzy</span> <span class="k">import</span> <span class="n">fuzz</span>
<span class="kn">from</span> <span class="nn">copy</span> <span class="k">import</span> <span class="n">deepcopy</span>


<div class="viewcode-block" id="get_score"><a class="viewcode-back" href="../../../src.Utils.xhtml#src.Utils.scoring_utils.get_score">[docs]</a><span class="k">def</span> <span class="nf">get_score</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">sku</span><span class="p">):</span>

    <span class="c1"># # print(item.name, &#39; -&gt; &#39;, sku._name)</span>
    <span class="n">item_sku_term_map</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="n">sku_clusters_copy</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">for</span> <span class="n">cluster</span><span class="p">,</span> <span class="n">term_list</span> <span class="ow">in</span> <span class="n">sku</span><span class="o">.</span><span class="n">cluster_terms</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
        <span class="n">sku_clusters_copy</span><span class="p">[</span><span class="n">cluster</span><span class="p">]</span> <span class="o">=</span> <span class="n">deepcopy</span><span class="p">(</span><span class="n">term_list</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">term</span> <span class="ow">in</span> <span class="n">item</span><span class="o">.</span><span class="n">terms</span><span class="p">:</span>

        <span class="n">term_cluster</span> <span class="o">=</span> <span class="n">item</span><span class="o">.</span><span class="n">term_cluster</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">term</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">term_cluster</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
            <span class="n">item_sku_term_map</span><span class="p">[</span><span class="n">term</span><span class="p">]</span> <span class="o">=</span> <span class="kc">None</span>
            <span class="k">continue</span>

        <span class="n">mapped_term_list</span> <span class="o">=</span> <span class="n">sku_clusters_copy</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">term_cluster</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">mapped_term_list</span><span class="p">:</span>
            <span class="n">item_sku_term_map</span><span class="p">[</span><span class="n">term</span><span class="p">]</span> <span class="o">=</span> <span class="kc">None</span>
            <span class="k">continue</span>
        <span class="n">item_sku_term_map</span><span class="p">[</span><span class="n">term</span><span class="p">]</span> <span class="o">=</span> <span class="n">mapped_term_list</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">mapped_term_list</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

    <span class="n">sku_item_term_map</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="n">item_clusters_copy</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">for</span> <span class="n">cluster</span><span class="p">,</span> <span class="n">term_list</span> <span class="ow">in</span> <span class="n">item</span><span class="o">.</span><span class="n">cluster_terms</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
        <span class="n">item_clusters_copy</span><span class="p">[</span><span class="n">cluster</span><span class="p">]</span> <span class="o">=</span> <span class="n">deepcopy</span><span class="p">(</span><span class="n">term_list</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">term</span> <span class="ow">in</span> <span class="n">sku</span><span class="o">.</span><span class="n">terms</span><span class="p">:</span>

        <span class="n">term_cluster</span> <span class="o">=</span> <span class="n">sku</span><span class="o">.</span><span class="n">term_cluster</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">term</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">term_cluster</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
            <span class="n">sku_item_term_map</span><span class="p">[</span><span class="n">term</span><span class="p">]</span> <span class="o">=</span> <span class="kc">None</span>
            <span class="k">continue</span>

        <span class="n">mapped_term_list</span> <span class="o">=</span> <span class="n">item_clusters_copy</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">term_cluster</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">mapped_term_list</span><span class="p">:</span>
            <span class="n">sku_item_term_map</span><span class="p">[</span><span class="n">term</span><span class="p">]</span> <span class="o">=</span> <span class="kc">None</span>
            <span class="k">continue</span>
        <span class="n">sku_item_term_map</span><span class="p">[</span><span class="n">term</span><span class="p">]</span> <span class="o">=</span> <span class="n">mapped_term_list</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">mapped_term_list</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

    <span class="c1"># print(item_sku_term_map)</span>
    <span class="c1"># print(sku_item_term_map)</span>

    <span class="n">score</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="n">sequential</span> <span class="o">=</span> <span class="n">get_sequential_score</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">sku</span><span class="p">,</span> <span class="n">item_sku_term_map</span><span class="p">)</span>
    <span class="n">user_query</span> <span class="o">=</span> <span class="n">get_user_query_score</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">sku</span><span class="p">,</span> <span class="n">item_sku_term_map</span><span class="p">)</span>
    <span class="n">brand_word</span> <span class="o">=</span> <span class="n">get_brand_word_score</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">sku</span><span class="p">,</span> <span class="n">sku_item_term_map</span><span class="p">)</span>
    <span class="n">root_words</span> <span class="o">=</span> <span class="n">get_root_words_score</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">sku</span><span class="p">,</span> <span class="n">sku_item_term_map</span><span class="p">)</span>
    <span class="n">meta_match</span> <span class="o">=</span> <span class="n">get_meta_match_score</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">sku</span><span class="p">)</span>
    <span class="n">match_ratio</span> <span class="o">=</span> <span class="n">get_match_ratio_score</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">sku</span><span class="p">)</span>

    <span class="n">score</span> <span class="o">+=</span> <span class="n">sequential</span> <span class="o">+</span> <span class="n">user_query</span> <span class="o">+</span> <span class="n">brand_word</span> <span class="o">+</span> <span class="n">root_words</span> <span class="o">+</span> <span class="n">meta_match</span> <span class="o">+</span> <span class="n">match_ratio</span>

    <span class="k">return</span> <span class="n">score</span></div>


<div class="viewcode-block" id="get_sequential_score"><a class="viewcode-back" href="../../../src.Utils.xhtml#src.Utils.scoring_utils.get_sequential_score">[docs]</a><span class="k">def</span> <span class="nf">get_sequential_score</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">sku</span><span class="p">,</span> <span class="n">item_sku_term_map</span><span class="p">):</span>

    <span class="n">scorer</span> <span class="o">=</span> <span class="n">Scorer</span><span class="p">(</span><span class="n">initial_score</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">initial_incrementer</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">decay_function</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">decay_factor</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
    <span class="n">prev_index</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>

    <span class="k">for</span> <span class="n">item_term</span> <span class="ow">in</span> <span class="n">item</span><span class="o">.</span><span class="n">terms</span><span class="p">:</span>

        <span class="n">sku_mapped_term</span> <span class="o">=</span> <span class="n">item_sku_term_map</span><span class="p">[</span><span class="n">item_term</span><span class="p">]</span>
        <span class="k">if</span> <span class="n">sku_mapped_term</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
            <span class="n">scorer</span><span class="o">.</span><span class="n">decay</span>
            <span class="k">continue</span>
        <span class="n">sku_term_index</span> <span class="o">=</span> <span class="n">sku</span><span class="o">.</span><span class="n">terms</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">sku_mapped_term</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">sku_term_index</span> <span class="o">&gt;=</span> <span class="n">prev_index</span><span class="p">:</span>
            <span class="n">scorer</span><span class="o">.</span><span class="n">increment</span>
            <span class="n">prev_index</span> <span class="o">=</span> <span class="n">sku_term_index</span>
            <span class="k">continue</span>
        <span class="k">if</span> <span class="n">prev_index</span> <span class="o">&gt;</span> <span class="n">sku_term_index</span><span class="p">:</span>
            <span class="n">scorer</span><span class="o">.</span><span class="n">decay</span>
            <span class="n">prev_index</span> <span class="o">=</span> <span class="n">sku_term_index</span>
            <span class="k">continue</span>

    <span class="c1"># print(&#39;get_sequential_score&#39;, scorer.score)</span>
    <span class="k">return</span> <span class="n">scorer</span><span class="o">.</span><span class="n">score</span></div>


<span class="c1"># scores based on the psychology that the user types in descending order of term importance</span>
<div class="viewcode-block" id="get_user_query_score"><a class="viewcode-back" href="../../../src.Utils.xhtml#src.Utils.scoring_utils.get_user_query_score">[docs]</a><span class="k">def</span> <span class="nf">get_user_query_score</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">sku</span><span class="p">,</span> <span class="n">item_sku_term_map</span><span class="p">):</span>

    <span class="n">scorer</span> <span class="o">=</span> <span class="n">Scorer</span><span class="p">(</span><span class="n">initial_score</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">initial_incrementer</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">decay_function</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">decay_factor</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">item_term</span> <span class="ow">in</span> <span class="n">item</span><span class="o">.</span><span class="n">terms</span><span class="p">:</span>

        <span class="k">if</span> <span class="n">item_sku_term_map</span><span class="p">[</span><span class="n">item_term</span><span class="p">]:</span>
            <span class="n">scorer</span><span class="o">.</span><span class="n">increment</span>
        <span class="n">scorer</span><span class="o">.</span><span class="n">decay</span>

    <span class="c1"># print(&#39;get_user_based_score&#39;, scorer.score)</span>
    <span class="k">return</span> <span class="n">scorer</span><span class="o">.</span><span class="n">score</span></div>


<span class="c1"># scores based on the convention that the brand name of a product is mentioned in the starting</span>
<div class="viewcode-block" id="get_brand_word_score"><a class="viewcode-back" href="../../../src.Utils.xhtml#src.Utils.scoring_utils.get_brand_word_score">[docs]</a><span class="k">def</span> <span class="nf">get_brand_word_score</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">sku</span><span class="p">,</span> <span class="n">sku_item_term_map</span><span class="p">):</span>

    <span class="n">scorer</span> <span class="o">=</span> <span class="n">Scorer</span><span class="p">(</span><span class="n">initial_score</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">initial_incrementer</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">decay_function</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">decay_factor</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">sku_term</span> <span class="ow">in</span> <span class="n">sku</span><span class="o">.</span><span class="n">terms</span><span class="p">:</span>

        <span class="k">if</span> <span class="n">sku_item_term_map</span><span class="p">[</span><span class="n">sku_term</span><span class="p">]:</span>
            <span class="n">scorer</span><span class="o">.</span><span class="n">increment</span>
        <span class="n">scorer</span><span class="o">.</span><span class="n">decay</span>

    <span class="c1"># print(&#39;get_brand_word_score&#39;, scorer.score)</span>
    <span class="k">return</span> <span class="n">scorer</span><span class="o">.</span><span class="n">score</span></div>


<span class="c1"># scores based on the contra-position of the brand word logic i.e. the product root word is present in the end</span>
<div class="viewcode-block" id="get_root_words_score"><a class="viewcode-back" href="../../../src.Utils.xhtml#src.Utils.scoring_utils.get_root_words_score">[docs]</a><span class="k">def</span> <span class="nf">get_root_words_score</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">sku</span><span class="p">,</span> <span class="n">sku_item_term_map</span><span class="p">):</span>

    <span class="n">scorer</span> <span class="o">=</span> <span class="n">Scorer</span><span class="p">(</span><span class="n">initial_score</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">initial_incrementer</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">decay_function</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">decay_factor</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">sku_term</span> <span class="ow">in</span> <span class="n">sku</span><span class="o">.</span><span class="n">terms</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>

        <span class="k">if</span> <span class="n">sku_item_term_map</span><span class="p">[</span><span class="n">sku_term</span><span class="p">]:</span>
            <span class="n">scorer</span><span class="o">.</span><span class="n">increment</span>

        <span class="n">scorer</span><span class="o">.</span><span class="n">decay</span>

    <span class="c1"># print(&#39;get_root_word_score&#39;, scorer.score)</span>
    <span class="k">return</span> <span class="n">scorer</span><span class="o">.</span><span class="n">score</span></div>


<span class="c1"># scores based on the meta data match of the item and sku</span>
<div class="viewcode-block" id="get_meta_match_score"><a class="viewcode-back" href="../../../src.Utils.xhtml#src.Utils.scoring_utils.get_meta_match_score">[docs]</a><span class="k">def</span> <span class="nf">get_meta_match_score</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">sku</span><span class="p">):</span>

    <span class="n">item_meta_data</span> <span class="o">=</span> <span class="n">item</span><span class="o">.</span><span class="n">meta_data</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
    <span class="n">sku_meta_data</span> <span class="o">=</span> <span class="n">sku</span><span class="o">.</span><span class="n">meta_data</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
    <span class="n">score</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">for</span> <span class="n">item_meta_term</span> <span class="ow">in</span> <span class="n">item_meta_data</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">sku_meta_term</span> <span class="ow">in</span> <span class="n">sku_meta_data</span><span class="p">:</span>
            <span class="n">temp_fuzz</span> <span class="o">=</span> <span class="n">fuzz</span><span class="o">.</span><span class="n">ratio</span><span class="p">(</span><span class="n">item_meta_term</span><span class="p">,</span> <span class="n">sku_meta_term</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">temp_fuzz</span> <span class="o">&gt;=</span> <span class="mi">75</span><span class="p">:</span>
                <span class="n">score</span> <span class="o">+=</span> <span class="n">temp_fuzz</span><span class="o">/</span><span class="mi">100</span>
                <span class="k">break</span>

    <span class="c1"># score = fuzz.token_sort_ratio(item_meta_data, sku_meta_data)/20</span>

    <span class="c1"># print(&#39;get_meta_match_score&#39;, score)</span>
    <span class="k">return</span> <span class="n">score</span></div>


<div class="viewcode-block" id="get_match_ratio_score"><a class="viewcode-back" href="../../../src.Utils.xhtml#src.Utils.scoring_utils.get_match_ratio_score">[docs]</a><span class="k">def</span> <span class="nf">get_match_ratio_score</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">sku</span><span class="p">):</span>

    <span class="n">item_clusters</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">item</span><span class="o">.</span><span class="n">cluster_terms</span><span class="o">.</span><span class="n">keys</span><span class="p">())</span>
    <span class="n">sku_clusters</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">sku</span><span class="o">.</span><span class="n">cluster_terms</span><span class="o">.</span><span class="n">keys</span><span class="p">())</span>
    <span class="n">match_clusters</span> <span class="o">=</span> <span class="n">item_clusters</span><span class="o">.</span><span class="n">intersection</span><span class="p">(</span><span class="n">sku_clusters</span><span class="p">)</span>

    <span class="n">score</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">min</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">match_clusters</span><span class="p">)</span><span class="o">/</span><span class="nb">len</span><span class="p">(</span><span class="n">sku</span><span class="o">.</span><span class="n">terms</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">match_clusters</span><span class="p">)</span><span class="o">/</span><span class="nb">len</span><span class="p">(</span><span class="n">item_clusters</span><span class="p">))</span><span class="o">*</span><span class="mi">10</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>

    <span class="c1"># print(&#39;get_match_ratio_score&#39;, score)</span>
    <span class="k">return</span> <span class="n">score</span></div>


</pre></div>

          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>