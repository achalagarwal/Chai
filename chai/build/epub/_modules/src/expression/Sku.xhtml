<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>src.expression.Sku</title>
    <link rel="stylesheet" href="../../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../../_static/pygments.css" type="text/css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <h1>Source code for src.expression.Sku</h1><div class="highlight"><pre>
<span></span><span class="kn">from</span> <span class="nn">src.Utils.sku_utils</span> <span class="k">import</span> <span class="n">clean_item_with_meta</span><span class="p">,</span> <span class="n">get_linear_span</span><span class="p">,</span> <span class="n">get_min_item_edit_distance</span><span class="p">,</span> <span class="n">is_eligible_pair</span>
<span class="kn">from</span> <span class="nn">src.cluster</span> <span class="k">import</span> <span class="n">Cluster</span>


<div class="viewcode-block" id="Sku"><a class="viewcode-back" href="../../../src.expression.xhtml#src.expression.Sku.Sku">[docs]</a><span class="k">class</span> <span class="nc">Sku</span><span class="p">:</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">sku_name</span><span class="p">,</span> <span class="n">sku_subtag</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="n">sku_id</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">):</span>

        <span class="c1"># stores the sku id</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_id</span> <span class="o">=</span> <span class="n">sku_id</span>

        <span class="c1"># stores original Name</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_name</span> <span class="o">=</span> <span class="n">sku_name</span>

        <span class="c1"># stores cleaned item name and meta data :- acronyms, quantity, measurements</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_clean_name</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">meta_data</span> <span class="o">=</span> <span class="n">clean_item_with_meta</span><span class="p">(</span><span class="n">sku_name</span><span class="p">)</span>

        <span class="c1"># validate item</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">assert</span> <span class="bp">self</span><span class="o">.</span><span class="n">_name</span>
        <span class="k">except</span> <span class="ne">AssertionError</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="n">sku_name</span><span class="p">)</span>

        <span class="c1"># final popularity that is released</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_popularity</span> <span class="o">=</span> <span class="mi">0</span>

        <span class="c1"># score is for cluster leader</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_score</span> <span class="o">=</span> <span class="mi">0</span>

        <span class="c1"># stores raw count with debuffed quantity</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_count</span> <span class="o">=</span> <span class="mi">0</span>

        <span class="c1"># computes and stores span for use in match_distance</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_span</span> <span class="o">=</span> <span class="n">get_linear_span</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_name</span><span class="o">.</span><span class="n">split</span><span class="p">())</span>

        <span class="c1"># stores subtag for better match</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_subtag</span> <span class="o">=</span> <span class="n">sku_subtag</span>

        <span class="c1"># stores set of dzer ids with count of matches</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_dzer_ids</span> <span class="o">=</span> <span class="p">{}</span>

        <span class="c1"># stores the set of user ids who have ordered the item (for count purposes)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_user_ids</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>

        <span class="c1"># stores the terms in the clean name</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">terms</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_clean_name</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>

        <span class="c1"># maps term to a cluster</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">term_cluster</span> <span class="o">=</span> <span class="p">{}</span>

        <span class="c1"># maps cluster to a list of terms (ordered)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">cluster_terms</span> <span class="o">=</span> <span class="p">{}</span>

        <span class="c1"># flag to set an sku object as disabled</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_disabled</span> <span class="o">=</span> <span class="kc">False</span>

        <span class="k">return</span>

<div class="viewcode-block" id="Sku.update_count"><a class="viewcode-back" href="../../../src.expression.xhtml#src.expression.Sku.Sku.update_count">[docs]</a>    <span class="k">def</span> <span class="nf">update_count</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">quantity</span><span class="p">):</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">assert</span> <span class="n">quantity</span> <span class="o">&gt;</span> <span class="mi">0</span>
        <span class="k">except</span> <span class="ne">AssertionError</span><span class="p">:</span>
            <span class="c1"># print(quantity)</span>
            <span class="n">quantity</span> <span class="o">=</span> <span class="mf">1.0</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">_count</span> <span class="o">+=</span> <span class="mi">1</span>

        <span class="k">if</span> <span class="mi">10</span> <span class="o">&lt;</span> <span class="n">quantity</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_count</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">elif</span> <span class="mi">8</span> <span class="o">&lt;</span> <span class="n">quantity</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_count</span> <span class="o">+=</span> <span class="mf">0.8</span>
        <span class="k">elif</span> <span class="mi">5</span> <span class="o">&lt;</span> <span class="n">quantity</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_count</span> <span class="o">+=</span> <span class="mf">0.5</span>
        <span class="k">elif</span> <span class="mi">2</span> <span class="o">&lt;</span> <span class="n">quantity</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_count</span> <span class="o">+=</span> <span class="mf">0.2</span>
        <span class="k">elif</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="n">quantity</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_count</span> <span class="o">+=</span> <span class="mf">0.1</span>

        <span class="k">return</span></div>

<div class="viewcode-block" id="Sku.match_distance"><a class="viewcode-back" href="../../../src.expression.xhtml#src.expression.Sku.Sku.match_distance">[docs]</a>    <span class="k">def</span> <span class="nf">match_distance</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">item_name</span><span class="p">):</span>

        <span class="c1"># clean_item = clean_item(item_name)</span>

        <span class="k">return</span> <span class="n">get_min_item_edit_distance</span><span class="p">(</span><span class="n">item_name</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">_span</span><span class="p">)</span></div>

<div class="viewcode-block" id="Sku.update_score"><a class="viewcode-back" href="../../../src.expression.xhtml#src.expression.Sku.Sku.update_score">[docs]</a>    <span class="k">def</span> <span class="nf">update_score</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">score</span><span class="p">):</span>

        <span class="k">assert</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>

        <span class="c1"># update score based on past count</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_score</span> <span class="o">+=</span> <span class="n">score</span> <span class="o">*</span> <span class="bp">self</span><span class="o">.</span><span class="n">_count</span> <span class="o">/</span> <span class="mi">100</span>

        <span class="k">return</span></div>

<div class="viewcode-block" id="Sku.setup_popularity"><a class="viewcode-back" href="../../../src.expression.xhtml#src.expression.Sku.Sku.setup_popularity">[docs]</a>    <span class="k">def</span> <span class="nf">setup_popularity</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">_popularity</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_score</span>

        <span class="k">return</span> <span class="mi">1</span></div>

<div class="viewcode-block" id="Sku.update_popularity"><a class="viewcode-back" href="../../../src.expression.xhtml#src.expression.Sku.Sku.update_popularity">[docs]</a>    <span class="k">def</span> <span class="nf">update_popularity</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">popularity</span><span class="p">):</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">_popularity</span> <span class="o">+=</span> <span class="n">popularity</span> <span class="o">*</span> <span class="bp">self</span><span class="o">.</span><span class="n">_count</span> <span class="o">/</span> <span class="mi">100</span>

        <span class="k">return</span></div>

<div class="viewcode-block" id="Sku.add_user"><a class="viewcode-back" href="../../../src.expression.xhtml#src.expression.Sku.Sku.add_user">[docs]</a>    <span class="k">def</span> <span class="nf">add_user</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">user_id</span><span class="p">):</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">_user_ids</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">user_id</span><span class="p">)</span>
        <span class="k">return</span> <span class="mi">1</span></div>

<div class="viewcode-block" id="Sku.add_dzer"><a class="viewcode-back" href="../../../src.expression.xhtml#src.expression.Sku.Sku.add_dzer">[docs]</a>    <span class="k">def</span> <span class="nf">add_dzer</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dzer_id</span><span class="p">):</span>

        <span class="n">prev_count</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_dzer_ids</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">dzer_id</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_dzer_ids</span><span class="p">[</span><span class="n">dzer_id</span><span class="p">]</span> <span class="o">=</span> <span class="n">prev_count</span> <span class="o">+</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="mi">1</span></div>

<div class="viewcode-block" id="Sku.add_cluster"><a class="viewcode-back" href="../../../src.expression.xhtml#src.expression.Sku.Sku.add_cluster">[docs]</a>    <span class="k">def</span> <span class="nf">add_cluster</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">term</span><span class="p">,</span> <span class="n">cluster</span><span class="p">):</span>

        <span class="k">assert</span> <span class="n">term</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">terms</span>
        <span class="k">assert</span> <span class="nb">type</span><span class="p">(</span><span class="n">cluster</span><span class="p">)</span> <span class="ow">is</span> <span class="n">Cluster</span><span class="o">.</span><span class="n">Cluster</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">term_cluster</span><span class="p">[</span><span class="n">term</span><span class="p">]</span> <span class="o">=</span> <span class="n">cluster</span>

        <span class="n">cluster_terms</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">cluster_terms</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">cluster</span><span class="p">,</span> <span class="p">[])</span>
        <span class="n">cluster_terms</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">term</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">cluster_terms</span><span class="p">[</span><span class="n">cluster</span><span class="p">]</span> <span class="o">=</span> <span class="n">cluster_terms</span>

        <span class="k">return</span> <span class="mi">1</span></div>

<div class="viewcode-block" id="Sku.is_eligible"><a class="viewcode-back" href="../../../src.expression.xhtml#src.expression.Sku.Sku.is_eligible">[docs]</a>    <span class="k">def</span> <span class="nf">is_eligible</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">item_name</span><span class="p">,</span> <span class="n">item_subtag</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">):</span>

        <span class="k">return</span> <span class="n">is_eligible_pair</span><span class="p">((</span><span class="bp">self</span><span class="o">.</span><span class="n">_name</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">_subtag</span><span class="p">),</span> <span class="p">(</span><span class="n">item_name</span><span class="p">,</span> <span class="n">item_subtag</span><span class="p">))</span></div>

    <span class="k">def</span> <span class="nf">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_name</span> <span class="o">+</span> <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span> <span class="o">+</span> \
               <span class="bp">self</span><span class="o">.</span><span class="n">_subtag</span> <span class="o">+</span> <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span> <span class="o">+</span> \
               <span class="nb">str</span><span class="p">(</span><span class="nb">round</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_popularity</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span> <span class="o">+</span> <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span> <span class="o">+</span> \
               <span class="nb">str</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_user_ids</span><span class="p">))</span> <span class="o">+</span> <span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span>

<div class="viewcode-block" id="Sku.get_subtag"><a class="viewcode-back" href="../../../src.expression.xhtml#src.expression.Sku.Sku.get_subtag">[docs]</a>    <span class="k">def</span> <span class="nf">get_subtag</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>

        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_subtag</span></div>

<div class="viewcode-block" id="Sku.get_name"><a class="viewcode-back" href="../../../src.expression.xhtml#src.expression.Sku.Sku.get_name">[docs]</a>    <span class="k">def</span> <span class="nf">get_name</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>

        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_name</span></div></div>
</pre></div>

          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>